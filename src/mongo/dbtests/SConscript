# -*- mode: python; -*-

Import("env")
Import("get_option")
Import("has_option")
Import("usemozjs")
Import("wiredtiger")

env = env.Clone()

env.Library(
    target="framework_options",
    source=[
        "framework_options.cpp",
        env.Idlc("framework_options.idl")[0],
    ],
    LIBDEPS=[
        '$VARIANT_DIR/mongo/db/server_options_core',
        '$VARIANT_DIR/mongo/db/storage/flow_control_parameters',
        '$VARIANT_DIR/mongo/db/storage/storage_options',
        '$VARIANT_DIR/mongo/util/options_parser/options_parser_init',
        '$VARIANT_DIR/mongo/unittest/unittest',
    ],
)

env.Library(
    target='testframework',
    source=[
        'framework.cpp',
        'framework_options_init.cpp',
    ],
    LIBDEPS=[
        '$VARIANT_DIR/mongo/db/catalog/catalog_impl',
        '$VARIANT_DIR/mongo/db/dbdirectclient',
        '$VARIANT_DIR/mongo/db/index_builds_coordinator_mongod',
        '$VARIANT_DIR/mongo/db/op_observer',
        '$VARIANT_DIR/mongo/db/service_context_d',
        '$VARIANT_DIR/mongo/db/s/sharding_runtime_d',
        '$VARIANT_DIR/mongo/scripting/scripting_common',
        '$VARIANT_DIR/mongo/unittest/unittest',
        'framework_options',
    ],
)

env.Library(
    target='mocklib',
    source=[
        'mock/mock_conn_registry.cpp',
        'mock/mock_dbclient_connection.cpp',
        'mock/mock_remote_db_server.cpp',
        'mock/mock_replica_set.cpp'
    ],
    LIBDEPS=[
        '$VARIANT_DIR/mongo/client/clientdriver_network',
        '$VARIANT_DIR/mongo/db/repl/replica_set_messages'
    ],
)

if not has_option('noshell') and usemozjs:
    shell_core_env = env.Clone()
    dbtest = shell_core_env.Program(
        target="dbtest",
        source=[
            'basictests.cpp',
            'clienttests.cpp',
            'commandtests.cpp',
            'counttests.cpp',
            'cursor_manager_test.cpp',
            'dbhelper_tests.cpp',
            'dbtests.cpp',
            'deferred_writer.cpp',
            'directclienttests.cpp',
            'documentsourcetests.cpp',
            'extensions_callback_real_test.cpp',
            'gle_test.cpp',
            'index_access_method_test.cpp',
            'indexcatalogtests.cpp',
            'indexupdatetests.cpp',
            'insert_test.cpp',
            'jsobjtests.cpp',
            'jsontests.cpp',
            'jstests.cpp',
            'logical_sessions_tests.cpp',
            'matchertests.cpp',
            'mock_dbclient_conn_test.cpp',
            'mock_replica_set_test.cpp',
            'multikey_paths_test.cpp',
            'shared_buffer_test.cpp',
            'pdfiletests.cpp',
            'plan_executor_invalidation_test.cpp',
            'plan_ranking.cpp',
            'query_plan_executor.cpp',
            'query_stage_and.cpp',
            'query_stage_cached_plan.cpp',
            'query_stage_collscan.cpp',
            'query_stage_count.cpp',
            'query_stage_count_scan.cpp',
            'query_stage_delete.cpp',
            'query_stage_distinct.cpp',
            'query_stage_ensure_sorted.cpp',
            'query_stage_fetch.cpp',
            'query_stage_ixscan.cpp',
            'query_stage_limit_skip.cpp',
            'query_stage_merge_sort.cpp',
            'query_stage_multiplan.cpp',
            'query_stage_near.cpp',
            'query_stage_sort.cpp',
            'query_stage_sort_key_generator.cpp',
            'query_stage_subplan.cpp',
            'query_stage_tests.cpp',
            'query_stage_trial.cpp',
            'query_stage_update.cpp',
            'querytests.cpp',
            'replica_set_monitor_test.cpp',
            'replica_set_tests.cpp',
            'repltests.cpp',
            'rollbacktests.cpp',
            'socktests.cpp',
            'storage_timestamp_tests.cpp',
            'threadedtests.cpp',
            'updatetests.cpp',
            'validate_tests.cpp',
            'wildcard_access_method_test.cpp',
            'wildcard_multikey_persistence_test.cpp',
        ],
        LIBDEPS=[
            "$VARIANT_DIR/mongo/bson/mutable/mutable_bson_test_utils",
            "$VARIANT_DIR/mongo/db/auth/authmongod",
            "$VARIANT_DIR/mongo/db/bson/dotted_path_support",
            "$VARIANT_DIR/mongo/db/catalog_raii",
            "$VARIANT_DIR/mongo/db/transaction",
            "$VARIANT_DIR/mongo/db/catalog/multi_index_block",
            "$VARIANT_DIR/mongo/db/commands/mongod",
            "$VARIANT_DIR/mongo/db/commands/test_commands_enabled",
            "$VARIANT_DIR/mongo/db/concurrency/deferred_writer",
            "$VARIANT_DIR/mongo/db/index/index_access_methods",
            "$VARIANT_DIR/mongo/db/index/index_build_interceptor",
            "$VARIANT_DIR/mongo/db/logical_clock",
            "$VARIANT_DIR/mongo/db/logical_time_metadata_hook",
            "$VARIANT_DIR/mongo/db/pipeline/document_value_test_util",
            "$VARIANT_DIR/mongo/db/query/collation/collator_interface_mock",
            "$VARIANT_DIR/mongo/db/query/command_request_response",
            "$VARIANT_DIR/mongo/db/query_exec",
            "$VARIANT_DIR/mongo/db/query/query_planner_test_lib",
            "$VARIANT_DIR/mongo/db/query/query_test_service_context",
            "$VARIANT_DIR/mongo/db/repl/drop_pending_collection_reaper",
            "$VARIANT_DIR/mongo/db/repl/repl_coordinator_interface",
            "$VARIANT_DIR/mongo/db/repl/replication_consistency_markers_impl",
            "$VARIANT_DIR/mongo/db/repl/replication_recovery",
            "$VARIANT_DIR/mongo/db/repl/replmocks",
            "$VARIANT_DIR/mongo/db/repl/serveronly_repl",
            "$VARIANT_DIR/mongo/db/repl/storage_interface_impl",
            "$VARIANT_DIR/mongo/db/repl/timestamp_block",
            "$VARIANT_DIR/mongo/db/s/op_observer_sharding_impl",
            "$VARIANT_DIR/mongo/db/sessions_collection_standalone",
            "$VARIANT_DIR/mongo/db/storage/biggie/storage_biggie",
            "$VARIANT_DIR/mongo/db/storage/ephemeral_for_test/storage_ephemeral_for_test",
            "$VARIANT_DIR/mongo/db/storage/durable_catalog_impl",
            "$VARIANT_DIR/mongo/db/storage/storage_engine_impl",
            "$VARIANT_DIR/mongo/db/storage/wiredtiger/storage_wiredtiger" if wiredtiger else [],
            "$VARIANT_DIR/mongo/transport/transport_layer_manager",
            "$VARIANT_DIR/mongo/transport/message_compressor_options_server",
            "$VARIANT_DIR/mongo/util/clock_source_mock",
            "$VARIANT_DIR/mongo/util/net/network",
            "$VARIANT_DIR/mongo/util/progress_meter",
            "$VARIANT_DIR/mongo/util/version_impl",
            "$VARIANT_DIR/mongo/shell_core",
            "mocklib",
            "testframework",
        ],
        AIB_COMPONENT="dbtests",
        AIB_COMPONENTS_EXTRA=[
            "tests",
        ],
    )
    hygienic = get_option('install-mode') == 'hygienic'
    if not hygienic:
        env.Alias("dbtest", env.Install('#/', dbtest))
