#!/usr/bin/env python2

# This script downloads the latest version of Compass and installs it on
# non-windows platforms.

import json
import os
import os.path as path
import shutil
import subprocess
import sys
import tempfile
import platform
import time
import urllib


def get_pkg_format():
    """Determine the package manager for this Linux distro."""
    with open(os.devnull, 'w') as fnull:
        try:
            subprocess.call(['apt-get', '--help'], stdout=fnull, stderr=fnull)
            return 'apt'
        except:
            pass

        try:
            subprocess.call(['dnf', '--help'], stdout=fnull, stderr=fnull)
            return 'dnf'
        except:
            pass

        try:
            subprocess.call(['yum', '--help'], stdout=fnull, stderr=fnull)
            return 'yum'
        except:
            pass

    return ''


def download_progress(count, block_size, total_size):
    """Log the download progress."""
    percent = int(count * block_size * 100 / total_size)
    sys.stdout.write("\rDownloading Compass... %d%%" % percent)
    sys.stdout.flush()


def download_pkg(link):
    """Download the package from link, logging progress. Returns the filename."""
    res = urllib.urlretrieve(link, reporthook=download_progress)
    # Download progress doesn't end with a newline so add it here.
    print ''
    return res[0]


def install_mac(dmg):
    """Use CLI tools to mount the dmg and extract all .apps into Applications."""
    tmp = tempfile.mkdtemp()
    subprocess.check_call(['hdiutil', 'attach', '-mountpoint', tmp, dmg])
    try:
        apps = [f for f in os.listdir(tmp) if f.endswith('.app')]
        for app in apps:
            if path.isdir('/Applications/' + app):
                print 'Old version appound removing...'
                shutil.rmtree('/Applications/' + app)
            print 'Copying %s to /Applications' % app
            shutil.copytree(path.join(tmp, app), '/Applications/' + app)
    # We don't really care about what errors come up here. Just log the failure
    # and use the finally to make sure we always unmount the dmg.
    except Exception as exception:
        print exception
    finally:
        subprocess.check_call(['hdiutil', 'detach', tmp])


def install_linux(pkg_format, pkg_file):
    """Use the package manager indicated by pkg_format to install pkg_file."""
    if pkg_format == 'yum':
        install = ['yum', 'install', '--assumeyes', pkg_file]
    elif pkg_format == 'apt':
        install = ['apt-get', 'install', '--yes', pkg_file]
    elif pkg_format == 'dnf':
        install = ['dnf', 'install', '--assumeyes', pkg_file]
    else:
        print 'No available installation methods.'
        sys.exit(1)

    subprocess.check_call(install)


def is_supported_distro():
    distro_name, version_number, extra = platform.linux_distribution()

    if (distro_name == 'Ubuntu' and
        (version_number == '14.04' or
         version_number == '16.04')):
        return True

    if (distro_name == 'Red Hat Enterprise Linux Server' and
        (int(version_numer) >= 7)):
        return True

    return False


def download_and_install_compass():
    """Download and install compass for this platform."""
    platform = sys.platform
    pkg_format = get_pkg_format()

    # Sometimes sys.platform gives us 'linux2' and we only want 'linux'
    if platform.startswith('linux'):
        platform = 'linux'
        if pkg_format == 'apt':
            platform += '_deb'
        elif pkg_format == 'yum' or pkg_format == 'dnf':
            platform += '_rpm'
    elif platform == 'darwin':
        platform = 'osx'

    if platform.startswith('linux') and os.getuid() != 0:
        print 'You must run this script as root.'
        sys.exit(1)

    if platform.startswith('linux') and not is_supported_distro():
        print 'You are using an unsupported Linux distribution.'
        ' Please visit: <some link here> to view available'
        ' community supported packages.'
        sys.exit(1)

    if platform.machine() != 'x86_64':
        print 'Sorry, MongoDB Compass is only supported on 64 bit platforms.'
        ' If you believe you\'re seeing this message in error please open a'
        ' ticket on the SERVER project at https://jira.mongodb.org/'

    link = 'https://compass.mongodb.com/api/v2/download/latest/@compass_type@/stable/' + platform
    pkg = download_pkg(link)

    print 'Installing the package...'
    if platform == 'osx':
        install_mac(pkg)
    elif platform.startswith('linux'):
        install_linux(pkg_format, pkg)
    else:
        print 'Unrecognized platform: %s' % platform

    print 'Cleaning up...'
    os.remove(pkg)
    print 'Done!'


if __name__ == '__main__':
    download_and_install_compass()
